#!/bin/bash
############################################################################
# Copyright 2020-2025 Ramon Fischer                                        #
#                                                                          #
# Licensed under the Apache License, Version 2.0 (the "License");          #
# you may not use this file except in compliance with the License.         #
# You may obtain a copy of the License at                                  #
#                                                                          #
#     http://www.apache.org/licenses/LICENSE-2.0                           #
#                                                                          #
# Unless required by applicable law or agreed to in writing, software      #
# distributed under the License is distributed on an "AS IS" BASIS,        #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. #
# See the License for the specific language governing permissions and      #
# limitations under the License.                                           #
############################################################################

command_list=(
                "/usr/bin/git"
                "/usr/bin/locate"
                "/usr/bin/nproc"
                "/usr/bin/pgrep"
                "/usr/bin/pkill"
                "/usr/bin/sleep"
                "/usr/bin/ssh-agent"
                "/usr/bin/ssh-add"
                "/usr/sbin/updatedb"
             )
checkCommands()
{
    unalias "${command_list[@]}" 2>/dev/null

    for current_command in "${command_list[@]}"
    do
        if [[ ! $(command -v "${current_command}") ]]
        then
            echo -e "\e[01;31mCould not find command '${current_command}'.\e[0m"
            exit 1
        fi
    done
}

checkCommands

# define global variables
current_username="${USER}"
home_directory="/home/${current_username}"
declare -a git_directory_array
git_directory_array=(
                        "${home_directory}/git"
                        "/usr/local/share/git"
                    )
db_filename="directory_index.db"
available_processors=$(/usr/bin/nproc --all)
declare -a prune_paths_array
# trailing slashes for directories must be left out!
# spaces must be escaped with backslash!
prune_paths_array=(
                    "${git_directory}/external/github.com/keks24/gitea/integrations/gitea-repositories-meta"
                    "${git_directory}/external/github.com/fritzbox/freetz-ng/make/pkgs/git/files/root/etc"
                  )

# cache ssh key password
if ! /usr/bin/pgrep --euid="${current_username}" "ssh-agent" >/dev/null
then
    echo -e "\e[01;33mCould not find process for 'ssh-agent'. Trying to start it...\e[0m" >&2
    # if this is started here, it is only valid for this subshell!
    eval $(/usr/bin/ssh-agent -st 1h)
    # get pid from the above command
    ssh_agent_pid="${SSH_AGENT_PID}"
fi

if ! /usr/bin/ssh-add "${home_directory}/.local/etc/update_git_repositories/ssh_private_key"
then
    echo -e "\e[01;31mCould not open a connection to the SSH agent.\e[0m" >&2
    exit 1
fi
/usr/bin/sleep 2s

for git_directory in "${git_directory_array[@]}"
do
    directory_index_file="${git_directory}/${db_filename}"

    # scan git directory and save binary index file
    ## the array needs to be expanded via "echo"!
    ## unfortunately, there is no way to only include ".git/" directories.
    ## unfortunately, "updatedb" does not traverse symlinks.
    /usr/sbin/updatedb \
        --prune-bind-mounts="no" \
        --prunefs="" \
        --prunenames="" \
        --add-prunepaths="$(echo ${prune_paths_array[@]})" \
        --database-root="${git_directory}" \
        --output="${directory_index_file}"

    # update git repositories
    ## debugging this is a bit difficult, since it runs in parallel.
    ## the outputs of the "echo" and "git pull" are also distorted.
    ## no inputs can be done in the subshell!
    /usr/bin/locate \
        --database="${directory_index_file}" \
        --regexp "\.git$" \
        --null \
        | xargs \
            --null \
            --no-run-if-empty \
            --max-procs="${available_processors}" \
            --replace="{}" \
            /bin/bash -c 'repository_directory="{}" && \
                echo -e "\n\e[01;34m### Updating: ${repository_directory%\.git} ###\e[0m" && \
                pushd "${repository_directory%\.git}" >/dev/null && \
                git pull --recurse-submodules --force && \
                popd >/dev/null'
done

# "ssh-agent" is not needed anymore
if [[ "${ssh_agent_pid}" != "" ]]
then
    /usr/bin/pkill --signal="SIGTERM" "${ssh_agent_pid}"
fi
