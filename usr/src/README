Compile new kernel
    1. Mount "boot" partition:
        $ mount "/boot/"

    2. Create a new symlink to the newest kernel source directory; not necessary, if use flag "symlink" is set:
        $ cd "/usr/src/"
        $ ln --symbolic --force "linux-<new_kernel_version>-gentoo/" "linux"

    3. Copy the configuration file ".config" from the old kernel source directory to the newer one:
        $ cp "linux-<old_kernel_version>/.config" "linux/.config"

        3.1. Alternative method: Copy the configuration file at runtime:
            $ zcat "/proc/config.gz" > "linux/.config"

    4. Compile the new kernel

        4.1. Adapt new kernel settings and automatically adapt their default values:
            $ cd "/usr/src/linux/"
            $ make olddefconfig

            4.1.1. Alternative method: Adapt new kernel settings manually step-by-step:
                $ make oldconfig

        4.2. Compile the kernel and kernel modules:
            $ available_processors=$(nproc --all)
            $ system_max_load=$(printf "%.2f" "$(( available_processors * 0.80 ))")
            $ make \
                --jobs="${available_processors}" \
                --load-average="${system_max_load}" && \
              make \
                --jobs="${available_processors}" \
                --load-average="${system_max_load}" \
                modules_install

        4.3. Install the kernel and copy it to "/boot/":
            $ make install

    5. Update the initramfs for the new kernel:
        $ update_initramfs

        5.1. Copy the initramfs file to "/boot/":
            $ cp "/usr/src/custom-initramfs-<new_kernel_version>.cpio.gz" "/boot/"

    6. Update the Intel CPU microcode, if necessary:
        $ emerge --oneshot sys-firmware/intel-microcode
        $ iucode_tool --scan-system --write-earlyfw="/boot/early_ucode.cpio" "/lib/firmware/intel-ucode/"* --overwrite

        6.1. Check the current microcode revision and date:
            $ dmesg | grep "microcode"

        6.2. Reload the microcode manually at runtime:
            $ echo "1" > "/sys/devices/system/cpu/microcode/reload"

        6.3. Check, if the microcode was updated:
            $ dmesg | grep "microcode"

    7. Update the GRUB configuration:
        $ grub-mkconfig --output="/boot/grub/grub.cfg"

    8. Compile all modules for the new kernel:
        $ emerge @module-rebuild

    9. Use the new kernel
        $ reboot

   10. Clean up "/lib/modules/"

   11. Clean up "/usr/src/"

   12. Clean up "/boot/"

Legend:
- "Clean up" - Keep last three versions
