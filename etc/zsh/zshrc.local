#############################################################################
# Copyright 2020 Ramon Fischer                                              #
#                                                                           #
# Licensed under the Apache License, Version 2.0 (the "License");           #
# you may not use this file except in compliance with the License.          #
# You may obtain a copy of the License at                                   #
#                                                                           #
#     http://www.apache.org/licenses/LICENSE-2.0                            #
#                                                                           #
# Unless required by applicable law or agreed to in writing, software       #
# distributed under the License is distributed on an "AS IS" BASIS,         #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  #
# See the License for the specific language governing permissions and       #
# limitations under the License.                                            #
#############################################################################

# functions
## translate words (english<->german)
dic()
{
    input_string=${*// /+}
    w3m -dump "http://pocket.dict.cc/?s=${input_string}" | head --lines="-6" | tail --lines="+6" | tac
}

## bash: execute bell when command is finished
precmd()
{
    eval "${PROMPT_COMMAND}"
}
PROMPT_COMMAND+='tput bel;'

## dynamically change the window title in "st"
if [[ "${TERM}" != "" && "${TERM}" == "st"* || "${TERM}" == "alacritty" ]]
then
    precmd()
    {
        # output on which level (%L) this shell is running on.
        # append the current directory (%~), substitute home directories with a tilde.
        # "\a" bell (man 1 echo)
        # "print" must be used here; echo cannot handle prompt expansions (%L)
        print -Pn "\e]0;$(id --user --name)@$(hostname): zsh[%L] %~\a"
    }

    preexec()
    {
        # output current executed command with parameters
        echo -en "\e]0;$(id --user --name)@$(hostname): ${1}\a"
    }
fi

## list process signals
# refactor me: put this function into a separate shell script, since it slows down the prompt on call
psig()
{
    declare -a pid_signal_array
    pid_signal_array[1]="SIGHUP"
    pid_signal_array[2]="SIGINT"
    pid_signal_array[3]="SIGQUIT"
    pid_signal_array[4]="SIGKILL"
    pid_signal_array[5]="SIGTRAP"
    pid_signal_array[6]="SIGABRT"
    pid_signal_array[7]="SIGBUS"
    pid_signal_array[8]="SIGFPE"
    pid_signal_array[9]="SIGKILL"
    pid_signal_array[10]="SIGUSR1"
    pid_signal_array[11]="SIGSEGV"
    pid_signal_array[12]="SIGUSR2"
    pid_signal_array[13]="SIGPIPE"
    pid_signal_array[14]="SIGALRM"
    pid_signal_array[15]="SIGTERM"
    pid_signal_array[16]="SIGSTKFLT"
    pid_signal_array[17]="SIGCHLD"
    pid_signal_array[18]="SIGCONT"
    pid_signal_array[19]="SIGSTOP"
    pid_signal_array[20]="SIGTSTP"
    pid_signal_array[21]="SIGTTIN"
    pid_signal_array[22]="SIGTTOU"
    pid_signal_array[23]="SIGURG"
    pid_signal_array[24]="SIGXCPU"
    pid_signal_array[25]="SIGXFSZ"
    pid_signal_array[26]="SIGVTALRM"
    pid_signal_array[27]="SIGPROF"
    pid_signal_array[28]="SIGWINCH"
    pid_signal_array[29]="SIGIO"
    pid_signal_array[30]="SIGPWR"
    pid_signal_array[31]="SIGSYS"
    # not defined
    #pid_signal_array[32]=""
    #pid_signal_array[33]=""
    pid_signal_array[34]="SIGRTMIN"
    pid_signal_array[35]="SIGRTMIN+1"
    pid_signal_array[36]="SIGRTMIN+2"
    pid_signal_array[37]="SIGRTMIN+3"
    pid_signal_array[38]="SIGRTMIN+4"
    pid_signal_array[39]="SIGRTMIN+5"
    pid_signal_array[40]="SIGRTMIN+6"
    pid_signal_array[41]="SIGRTMIN+7"
    pid_signal_array[42]="SIGRTMIN+8"
    pid_signal_array[43]="SIGRTMIN+9"
    pid_signal_array[44]="SIGRTMIN+10"
    pid_signal_array[45]="SIGRTMIN+11"
    pid_signal_array[46]="SIGRTMIN+12"
    pid_signal_array[47]="SIGRTMIN+13"
    pid_signal_array[48]="SIGRTMIN+14"
    pid_signal_array[49]="SIGRTMIN+15"
    pid_signal_array[50]="SIGRTMAX-14"
    pid_signal_array[51]="SIGRTMAX-13"
    pid_signal_array[52]="SIGRTMAX-12"
    pid_signal_array[53]="SIGRTMAX-11"
    pid_signal_array[54]="SIGRTMAX-10"
    pid_signal_array[55]="SIGRTMAX-9"
    pid_signal_array[56]="SIGRTMAX-8"
    pid_signal_array[57]="SIGRTMAX-7"
    pid_signal_array[58]="SIGRTMAX-6"
    pid_signal_array[59]="SIGRTMAX-5"
    pid_signal_array[60]="SIGRTMAX-4"
    pid_signal_array[61]="SIGRTMAX-3"
    pid_signal_array[62]="SIGRTMAX-2"
    pid_signal_array[63]="SIGRTMAX-1"
    pid_signal_array[64]="SIGRTMAX"
    declare -A hex_value_array
    local hex_value_array["0"]="0"
    local hex_value_array["1"]="1"
    local hex_value_array["2"]="2"
    local hex_value_array["3"]="3"
    local hex_value_array["4"]="4"
    local hex_value_array["5"]="5"
    local hex_value_array["6"]="6"
    local hex_value_array["7"]="7"
    local hex_value_array["8"]="8"
    local hex_value_array["9"]="9"
    local hex_value_array["a"]="10"
    local hex_value_array["b"]="11"
    local hex_value_array["c"]="12"
    local hex_value_array["d"]="13"
    local hex_value_array["e"]="14"
    local hex_value_array["f"]="15"
    declare -a bin_value_4bit_array=({0..1}{0..1}{0..1}{0..1})
    declare -A pid_signal_name_array
    local pid_signal_name_array["SigPnd:"]="Signals pending (thread):"
    local pid_signal_name_array["ShdPnd:"]="Signals pending (process):"
    local pid_signal_name_array["SigBlk:"]="Signals blocked:"
    local pid_signal_name_array["SigIgn:"]="Signals ignored:"
    local pid_signal_name_array["SigCgt:"]="Signals caught:"

    declare -a pid_array=("${@}")
    for pid in "${pid_array[@]}"
    do
        local pid_directory_path="/proc/${pid}"
        local pid_status_file="status"
        local pid_status=$(< "${pid_directory_path}/${pid_status_file}")
        declare -a pid_signal_bin_value_4bit_array
        declare -a pid_signal_bin_value_1bit_array
        unset hex_position
        unset hex_value
        unset binary_position
        unset binary_value
        local hex_position
        local hex_value
        local binary_position
        local binary_value

        echo ""
        echo "PID: ${pid}"

        for pid_signal_name in "${(k)pid_signal_name_array[@]}"
        do
            local pid_signal_hex_value=$(echo "${pid_status}" | awk --assign="pid_signal_name=${pid_signal_name}" '$0 ~ pid_signal_name { print $2 }')
            declare -a pid_signal_hex_value_delimited_array

            # refactor me: create function "hexToBin()"

            # split hexadecimal string per character
            # from: 0000000180004a03
            # to:   0 0 0 0 0 0 0 1 8 0 0 0 4 a 0 3
            unset pid_signal_hex_value_delimited_array
            for hex_position in {0.."${#pid_signal_hex_value}"}
            do
                pid_signal_hex_value_delimited_array+=("${pid_signal_hex_value:${hex_position}:1}")
            done

            # convert hexadecimal to binary per character
            # from: 0    0    0    0    0    0    0    1    8    0    0    0    4    a    0    3
            # to:   0000 0000 0000 0000 0000 0000 0000 0001 1000 0000 0000 0000 0100 1010 0000 0011
            unset pid_signal_bin_value_4bit_array
            for hex_value in "${pid_signal_hex_value_delimited_array[@]}"
            do
                if [[ "${hex_value}" =~ ^[0-9]$ ]]
                then
                    pid_signal_bin_value_4bit_array+="${bin_value_4bit_array[${hex_value}+1]} "
                elif [[ "${hex_value}" =~ ^[a-fA-F]$ ]]
                then
                    pid_signal_bin_value_4bit_array+="${bin_value_4bit_array[hex_value_array[${hex_value}]+1]} "
                fi
            done

            # concatenate binary string and split string per character
            # from: 0000 0000 0000 0000 0000 0000 0000 0001 1000 0000 0000 0000 0100 1010 0000 0011
            # to:   0000000000000000000000000000000110000000000000000100101000000011
            # to:   0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 1 0 1 0 0 0 0 0 0 0 1 1
            pid_signal_bin_value_concatenated="${pid_signal_bin_value_4bit_array[@]// /}"
            unset pid_signal_bin_value_1bit_array
            for binary_position in {0.."$(( ${#pid_signal_bin_value_concatenated} - 1 ))"}
            do
                pid_signal_bin_value_1bit_array+=("${pid_signal_bin_value_concatenated:${binary_position}:1}")
            done

            # convert binary to signal name per character
            # from: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 1 0 1 0 0 0 0 0 0 0 1 1
            # to:   Signal <signal_number>: <signal_name>
            local binary_array_index="${#pid_signal_bin_value_concatenated}"

            echo ""
            echo "${pid_signal_name_array[${pid_signal_name}]}"
            echo "${pid_signal_name_array[${pid_signal_name}]//[a-zA-Z :()]/-}"
            for binary_value in "${pid_signal_bin_value_1bit_array[@]}"
            do
                # signal "32" and "33" are undefined
                if [[ "${binary_array_index}" == "32" || "${binary_array_index}" == "33" ]]
                then
                    (( binary_array_index-- ))
                    continue
                elif [[ "${binary_value}" == "0" ]]
                then
                    (( binary_array_index-- ))
                    continue
                elif [[ "${binary_value}" == "1" ]]
                then
                    echo "Signal ${binary_array_index}: ${pid_signal_array[${binary_array_index}]}"
                fi

                (( binary_array_index-- ))
            done

            # output results, if there is any signal. also output results, if signal "32" and "33" are set to "1", which actually does not make any sense.
            if [[ "${pid_signal_bin_value_concatenated}" == *"1"* ]]
            then
                echo -e "Hexadecimal: ${pid_signal_hex_value_delimited_array[@]}\nBinary: ${pid_signal_bin_value_4bit_array[@]}" | column --table
            else
                echo "No signals found."
            fi
        done
    done
}

## do not include faulty commands in history
zshaddhistory()
{
    whence ${${(z)1}[1]} >| /dev/null || return 1
}

## determine last portage synchronisation
getLastPortageSync()
{
    current_unix_time="$(date +%s)"
    portage_unix_time="$(date --date="$(< /var/db/repos/gentoo/metadata/timestamp.chk)" +%s)"
    days_since_last_sync="$(( (${current_unix_time} - ${portage_unix_time}) / 86400.0 ))"

    if (( ${days_since_last_sync} >= 3.5 && ${days_since_last_sync} < 7 ))
    then
        printf "\e[01;33m[%.2f] days since last portage synchronisation.\e[0m\n" "${days_since_last_sync}"
    elif (( ${days_since_last_sync} >= 7 ))
    then
        printf "\e[01;31;5m[%.2f] days since last portage synchronisation!\e[0m \e[01;31m(execute as root: /root/bin/update.sh)\e[0m\n" "${days_since_last_sync}"
    elif [[ "${1}" == "-v" ]]
    then
        printf "\e[01;34m[%.2f] days since last portage synchronisation.\e[0m\n" "${days_since_last_sync}"
    else
        printf ""
    fi
}

## generate strong passwords with ~130 bit entropy
genpw()
{
    local -i password_length=24
    local remove_characters="[:space:]"
    local -i password_count=20

    while (( ${#} ))
    do
        case "${1}" in
            "-a" | "--no-lowercase")
                remove_characters+="a-z"
                ;;

            "-A" | "--no-uppercase")
                remove_characters+="A-Z"
                ;;

            "-c" | "--count")
                password_count="${2}"
                shift
                ;;

            "-l" | "--length")
                password_length="${2}"
                shift
                ;;

            "-n" | "--no-numbers")
                remove_characters+="0-9"
                ;;

            "-s" | "--no-special")
                remove_characters+="[:punct:]"
                ;;

            "-h" | "--help")
                echo ""
                echo "Usage: ${0} [options] <arguments>"
                echo ""
                echo "OPTIONS:"
                echo "  -a, --no-lowercase              exclude lowercase characters"
                echo "  -A, --no-uppercase              excluce uppercase characters"
                echo "  -c, --count <number>            define the amount of generated passwords"
                echo "  -l, --length <number>           define password length"
                echo "  -n, --no-numbers                exclude numeric characters"
                echo "  -s, --no-special                exclude special characters"
                echo "  -h, --help                      show this message"
                echo ""
                echo "EXAMPLES:"
                echo "  generate a password with 24 characters"
                echo "      ${0} --length 24"
                echo ""
                echo "  exclude special and uppercase characters"
                echo "      ${0} --no-special --no-uppercase"
                return 0
        esac
        shift 1 >/dev/null 2>&1 || break
    done

    for i in {1..${password_count}}
    do
        strings --bytes=1 /dev/urandom | tr --delete "${remove_characters}" | head --bytes="${password_length}"
        echo ""
    done
}

## notify after a command has finished
## usage: notifyme some_command
notifyme()
{
    local -i start_time="$(date +%s)"

    "${@}"

    local end_time="$(date +%s)"
    local total_execution_time="$(( end_time - start_time ))"
    #if (( total_execution_time >= 15 ))
    #then
        notify-send --app-name=Notification --icon=notifications --urgency=critical "Command finished [${total_execution_time} seconds]" "'$(echo ${@})'"
    #fi
}

# prompt shell
## colour
#if [[ $(id --user) == "0" ]]
#then
#    zstyle ':prompt:grml:*:items:user' pre '%F{yellow}'
#else
#    zstyle ':prompt:grml:*:items:user' pre '%F{magenta}'
#fi

# source
## autojump
source "/usr/share/autojump/autojump.zsh"
## zsh-autosuggestions
source "/usr/local/share/git/zsh/zsh-autosuggestions/zsh-autosuggestions.zsh"
## zsh-syntax-highlighting
source "/usr/local/share/git/zsh/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh"

# aliases
alias aria2c="aria2c --force-sequential=true --min-split-size=20M --split=8 --max-connection-per-server=8"
alias bc="bc --mathlib"
alias dd="dd bs=512b status=progress"
alias diff="diff --side-by-side --suppress-common-lines --color"
alias dvdbackup="dvdbackup --progress"
alias growisofs="growisofs -speed=1"
alias halt="echo 'Are you sure? Please run: /sbin/halt'"
alias hexdump="hexdump --canonical"
alias history="history -i"
alias ip="ip --color"
alias l="ls -vC --classify"
alias la="ls -v --all"
alias listgroups="awk --field-separator ':' '{ printf \"Group name: %-20s GID: %-10s Members: %-10s\n\", \$1, \$3, \$4 }' '/etc/group' | sort --numeric-sort --key=5"
alias listusers="awk --field-separator ':' '{ printf \"Username: %-20s UID: %-10s GID: %-10s Shell: %-10s\n\", \$1, \$3, \$4, \$7 }' '/etc/passwd' | sort --numeric-sort --key=4"
alias ll="ls -vl"
alias ln="ln --verbose"
alias locate="locate --ignore-case"
alias mkdir="mkdir --parents"
alias path="echo ${PATH//:/'\n'}"
alias poweroff="echo 'Are you sure? Please run: /sbin/poweroff'"
alias ps="ps axo user,group,uid,gid,ppid,pid,pgid,sid,sgid,%cpu,%mem,vsz,rss,tty,stat,start,time,comm,args=ARGS"
alias pstree="pstree --unicode --arguments --highlight-all --show-pids --show-pgids --numeric-sort"
alias ptree="namei --long --mountpoints '$(pwd)'"
alias radeontop="radeontop --color"
alias rdesktop="rdesktop -g 1920x1080 -P -z -x -l -r sound:off -k '/usr/share/rdesktop/keymaps/de'"
alias reboot="echo 'Are you sure? Please run: /sbin/reboot'"
alias rsync="rsync --archive --hard-links --acls --xattrs --one-file-system --numeric-ids --info=progress2 --rsh='ssh -T -c aes256-gcm@openssh.com -o Compression=no -x'"
alias shutdown="echo 'Are you sure? Please run: /sbin/shutdown'"
alias shred="shred --verbose"
alias tree="tree -F"
alias vmstat="vmstat --timestamp --wide 2"
alias watch="watch --differences"
alias webcam_live_capture="mpv --demuxer-lavf-format='video4linux2' --profile='low-latency' --demuxer-lavf-o-set=input_format='mjpeg' --untimed 'av://v4l2:/dev/video0'"
alias webcam_record="ffmpeg -f v4l2 -framerate 30 -video_size 1920x1080 -input_format mjpeg -i /dev/video0 -f alsa -i default -c:a aac '$(date +%Y%m%d)_webcam_record.mkv'"
alias youtube-dl="youtube-dl --ignore-errors --extract-audio --audio-quality 0 --output './%(uploader)s/%(playlist_title)s/%(title)s.%(ext)s'"
alias zerofree="zerofree -v"

# export
## set default text editor
export EDITOR="nvim"
export VISUAL="nvim"
## location for x cache
export XDG_CACHE_HOME="${HOME}/.cache"
## set colours for hard and orphaned symlinks
export LS_COLORS="mh=44;37:or=40;31;01"
## less
### general settings
export LESS="--RAW-CONTROL-CHARS --LONG-PROMPT --shift 5 --ignore-case"
### enable syntax highlighting
export LESSOPEN="| lesspipe.sh %s"
### do not save search entries at "~/.lesshst"
export LESSHISTFILE="/dev/null"
## do not include certain commands in history
export ZSH_AUTOSUGGEST_BUFFER_MAX_SIZE="20"
## do not include critical commands in history
export HISTORY_IGNORE="(*--delete*|*-delete*|*--force*|*--remove*|cd*|*chmod*|*chown*|clear*|*dd*|*delete*|exit*|*find*|*for*|*halt*|*mkfs*|*lpr*|ls*|*mv*|*perl-rename*|*poweroff*|pwd*|*reboot*|*rename*|*rm*|*shred*|*shutdown*|sudo*|*suspend*)"
## use "ccache" via "distcc". see also "/etc/conf.d/distccd", "/etc/distcc/hosts", "/etc/env.d/03distcc_ccache" and "/etc/portage/make.conf"
export PATH="/usr/lib/ccache/bin:${PATH}"
export CCACHE_DIR="/home/ramon/.var/tmp/ccache"
export DISTCC_DIR="/home/ramon/.var/tmp/distcc"
## always use the best compression method of "xz"
export XZ_OPT="-9"

# output when opening shell
## list who is logged in
who
## list tmux sessions
if [[ $(pgrep "tmux") ]]
then
    tmux ls
fi
## portage
### last synchronisation in days
getLastPortageSync
