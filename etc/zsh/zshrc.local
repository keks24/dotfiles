#############################################################################
# Copyright 2020 Ramon Fischer                                              #
#                                                                           #
# Licensed under the Apache License, Version 2.0 (the "License");           #
# you may not use this file except in compliance with the License.          #
# You may obtain a copy of the License at                                   #
#                                                                           #
#     http://www.apache.org/licenses/LICENSE-2.0                            #
#                                                                           #
# Unless required by applicable law or agreed to in writing, software       #
# distributed under the License is distributed on an "AS IS" BASIS,         #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  #
# See the License for the specific language governing permissions and       #
# limitations under the License.                                            #
#############################################################################

# functions
## translate words (english<->german)
dic()
{
    input_string=${*// /+}
    w3m -dump "http://pocket.dict.cc/?s=${input_string}" | head --lines="-6" | tail --lines="+6" | tac
}

## bash: execute bell when command is finished
precmd()
{
    eval "${PROMPT_COMMAND}"
}
PROMPT_COMMAND+='tput bel;'

## dynamically change the window title for terminals
if [[ "${TERM}" != "" && "${TERM}" == "st"* || "${TERM}" == "alacritty" ]]
then
    precmd()
    {
        # output on which level (%L) this shell is running on.
        # append the current directory (%~), substitute home directories with a tilde.
        # "\a" bell (man 1 echo)
        # "print" must be used here; echo cannot handle prompt expansions (%L)
        print -Pn "\e]0;$(id --user --name)@$(hostname): zsh[%L] %~\a"
    }

    preexec()
    {
        # output current executed command with parameters
        echo -en "\e]0;$(id --user --name)@$(hostname): ${1}\a"
    }
fi

exclude_remove_on()
{
    setopt extended_glob
    echo -e "\e[01;31mGlob syntax has been activated.\e[0m"
    echo "Examples:"
    echo "Remove all files, except the file 'nom': rm -- ^\"nom\""
    echo "Remove all files, except files with the suffix 'png' and 'jpg': rm -- ^.*(png|jpg)"
}

exclude_remove_off()
{
    unsetopt extended_glob
    echo -e "\e[01;31mGlob syntax has been deactivated.\e[0m"
}

## do not include faulty commands in history
zshaddhistory()
{
    whence ${${(z)1}[1]} >| /dev/null || return 1
}

## determine last portage synchronisation
getLastPortageSync()
{
    current_unix_time="$(date +%s)"
    portage_unix_time="$(date --date="$(< /var/db/repos/gentoo/metadata/timestamp.chk)" +%s)"
    days_since_last_sync="$(( (${current_unix_time} - ${portage_unix_time}) / 86400.0 ))"

    if (( ${days_since_last_sync} >= 3.5 && ${days_since_last_sync} < 7 ))
    then
        printf "\e[01;33m[%.2f] days since last portage synchronisation.\e[0m\n" "${days_since_last_sync}"
    elif (( ${days_since_last_sync} >= 7 ))
    then
        printf "\e[01;31;5m[%.2f] days since last portage synchronisation!\e[0m \e[01;31m(execute as root: /root/bin/update.sh)\e[0m\n" "${days_since_last_sync}"
    elif [[ "${1}" == "-v" ]]
    then
        printf "\e[01;34m[%.2f] days since last portage synchronisation.\e[0m\n" "${days_since_last_sync}"
    else
        printf ""
    fi
}

## generate strong passwords with ~130 bit entropy
genpw()
{
    local -i password_length=24
    local remove_characters="[:space:]"
    local -i password_count=20

    while (( ${#} ))
    do
        case "${1}" in
            "-a" | "--no-lowercase")
                remove_characters+="a-z"
                ;;

            "-A" | "--no-uppercase")
                remove_characters+="A-Z"
                ;;

            "-c" | "--count")
                password_count="${2}"
                shift
                ;;

            "-l" | "--length")
                password_length="${2}"
                shift
                ;;

            "-n" | "--no-numbers")
                remove_characters+="0-9"
                ;;

            "-s" | "--no-special")
                remove_characters+="[:punct:]"
                ;;

            "-h" | "--help")
                echo ""
                echo "Usage: ${0} [options] <arguments>"
                echo ""
                echo "OPTIONS:"
                echo "  -a, --no-lowercase              exclude lowercase characters"
                echo "  -A, --no-uppercase              excluce uppercase characters"
                echo "  -c, --count <number>            define the amount of generated passwords"
                echo "  -l, --length <number>           define password length"
                echo "  -n, --no-numbers                exclude numeric characters"
                echo "  -s, --no-special                exclude special characters"
                echo "  -h, --help                      show this message"
                echo ""
                echo "EXAMPLES:"
                echo "  generate a password with 24 characters"
                echo "      ${0} --length 24"
                echo ""
                echo "  exclude special and uppercase characters"
                echo "      ${0} --no-special --no-uppercase"
                return 0
        esac
        shift 1 >/dev/null 2>&1 || break
    done

    for i in {1..${password_count}}
    do
        strings --bytes=1 /dev/urandom | tr --delete "${remove_characters}" | head --bytes="${password_length}"
        echo ""
    done
}

ptree()
{
    local directory_path="${1:-$(pwd)}"
    namei --long --mountpoints "${directory_path}"
}

## notify after a command has finished
## usage: notifyme some_command
notifyme()
{
    local -i start_time="$(date +%s)"

    "${@}"

    local end_time="$(date +%s)"
    local total_execution_time="$(( end_time - start_time ))"
    #if (( total_execution_time >= 15 ))
    #then
        notify-send --app-name="Notification" --icon="notifications" --urgency="critical" "Command finished [${total_execution_time} seconds]" "'$(echo ${@})'"
    #fi
}

# prompt shell
## colour
#if [[ $(id --user) == "0" ]]
#then
#    zstyle ':prompt:grml:*:items:user' pre '%F{yellow}'
#else
#    zstyle ':prompt:grml:*:items:user' pre '%F{magenta}'
#fi

# source
## autojump
source "/usr/share/autojump/autojump.zsh"
## zsh-autosuggestions
source "/usr/local/share/git/zsh/zsh-autosuggestions/zsh-autosuggestions.zsh"
## zsh-syntax-highlighting
source "/usr/local/share/git/zsh/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh"

# aliases
alias aria2c="aria2c --enable-rpc='false' \
    --rpc-allow-origin-all='false' \
    --rpc-listen-all='false' \
    --force-sequential='true' \
    --continue='true' \
    --auto-save-interval='30' \
    --http-accept-gzip='true' \
    --netrc-path='/home/ramon/.cache/aria2/netrc' \
    --max-concurrent-downloads='4' \
    --max-connection-per-server='8' \
    --min-split-size='20M' \
    --split='8' \
    --save-session='/home/ramon/.cache/aria2/aria2_session.gz' \
    --save-session-interval='60' \
    --bt-detach-seed-only='true' \
    --bt-enable-lpd='true' \
    --bt-stop-timeout='21600' \
    --check-integrity='true' \
    --seed-time='0' \
    --enable-dht='true' \
    --enable-dht6='true' \
    --dht-listen-port='6881-6999' \
    --dht-file-path='/home/ramon/.cache/aria2/dht.dat' \
    --dht-file-path6='/home/ramon/.cache/aria2/dht6.dat' \
    --bt-force-encryption='true' \
    --bt-require-crypto='true' \
    --bt-min-crypto-level='arc4' \
    --bt-max-peers='60' \
    --bt-request-peer-speed-limit='50K' \
    --max-overall-upload-limit='400K' \
    --disable-ipv6='false' \
    --event-poll='epoll' \
    --file-allocation='falloc' \
    --max-download-limit='0' \
    --max-overall-download-limit='0' \
    --optimize-concurrent-downloads='true' \
    --min-tls-version='TLSv1.2' \
    --allow-overwrite='true' \
    --auto-file-renaming='false' \
    --conditional-get='true' \
    --remove-control-file='false'"
alias bc="bc --mathlib"
alias cdrecord="cdrecord -sao -speed='0' -eject -v"
alias dd="dd bs='512b' conv='fdatasync' status='progress'"
alias diff="diff --side-by-side --suppress-common-lines --color"
alias dvdbackup="dvdbackup --progress"
alias fallocate="fallocate --verbose"
alias fping="fping --generate --rdns"
alias growisofs="growisofs -speed='1'"
alias halt="echo 'Are you sure? Please run: /sbin/halt'"
alias hexdump="hexdump --canonical"
alias history="history -i"
alias iotop="iotop --only --processes --accumulated --delay='2'"
alias ip="ip --color"
alias l="ls -vC --classify"
alias la="ls -v --all"
alias listgroups="awk --field-separator ':' '{ printf \"Group name: %-20s GID: %-10s Members: %-10s\n\", \$1, \$3, \$4 }' '/etc/group' | sort --numeric-sort --key='5'"
alias listusers="awk --field-separator ':' '{ printf \"Username: %-20s UID: %-10s GID: %-10s Shell: %-10s\n\", \$1, \$3, \$4, \$7 }' '/etc/passwd' | sort --numeric-sort --key='4'"
alias ll="ls -vl"
alias ln="ln --verbose"
alias locate="locate --ignore-case"
alias lsblk="lsblk --discard --fs --merge --perms --zoned"
alias mkdir="mkdir --parents"
alias mktorrent="mktorrent --verbose \
    --announce='http://tracker.openbittorrent.com:80/announce' \
    --announce='udp://tracker.internetwarriors.net:1337/announce' \
    --announce='udp://tracker.opentrackr.org:1337/announce' \
    --announce='udp://exodus.desync.com:6969/announce' \
    --announce='udp://tracker.tiny-vps.com:6969/announce' \
    --announce='udp://retracker.lanta-net.ru:2710/announce' \
    --announce='udp://tracker.torrent.eu.org:451/announce' \
    --announce='udp://tracker.moeking.me:6969/announce' \
    --announce='udp://vibe.community:6969/announce' \
    --announce='udp://valakas.rollo.dnsabr.com:2710/announce' \
    --announce='udp://tracker0.ufibox.com:6969/announce' \
    --announce='udp://tracker.zerobytes.xyz:1337/announce' \
    --announce='udp://tracker.v6speed.org:6969/announce' \
    --announce='udp://tracker.uw0.xyz:6969/announce' \
    --announce='udp://tracker.shkinev.me:6969/announce' \
    --announce='udp://tracker.nighthawk.pw:2052/announce' \
    --announce='udp://tracker.lelux.fi:6969/announce'"
alias nload="nload -u K"
alias path="echo ${PATH//:/'\n'}"
alias poweroff="echo 'Are you sure? Please run: /sbin/poweroff'"
alias ps="ps axo user,group,uid,gid,ppid,pid,pgid,sid,sgid,%cpu,%mem,vsz,rss,tty,stat,start,time,comm,args=ARGS"
alias pstree="pstree --unicode --arguments --highlight-all --show-pids --show-pgids --numeric-sort"
alias radeontop="radeontop --color"
alias rdesktop="rdesktop -g 1920x1080 -P -z -x -l -r sound:off -k '/usr/share/rdesktop/keymaps/de'"
alias reboot="echo 'Are you sure? Please run: /sbin/reboot'"
alias rsync="rsync --archive --hard-links --acls --xattrs --one-file-system --numeric-ids --info='progress2' --rsh='ssh -T -c chacha20-poly1305@openssh.com,aes256-gcm@openssh.com -o Compression=no -x'"
alias shutdown="echo 'Are you sure? Please run: /sbin/shutdown'"
alias shred="shred --verbose"
alias tree="LS_COLORS='' tree -FC"
alias vmstat="vmstat --unit='M' --timestamp --wide 2"
alias watch="watch --differences"
alias webcam_live_capture="mpv --demuxer-lavf-format='video4linux2' --profile='low-latency' --demuxer-lavf-o-set=input_format='mjpeg' --untimed 'av://v4l2:/dev/video0'"
alias webcam_record="ffmpeg -f v4l2 -framerate 30 -video_size 1920x1080 -input_format mjpeg -i /dev/video0 -f alsa -i default -c:a aac '$(date +%Y%m%d)_webcam_record.mkv'"
alias youtube-dl="youtube-dl --ignore-errors --extract-audio --audio-quality 0 --output './%(uploader)s/%(playlist_title)s/%(title)s.%(ext)s'"
alias zerofree="zerofree -v"
alias zstd="zstd --verbose"
alias zstdmt="zstdmt --verbose"
if [[ $(id --user) == "0" ]]
then
    alias pip="echo -e \"\e[01;31m'pip' should not be executed with root privileges!\e[0m\""
fi

# export
## set default text editor
export EDITOR="nvim"
export VISUAL="nvim"
## location for x cache
export XDG_CACHE_HOME="${HOME}/.cache"
## set colours for hard and orphaned symlinks
export LS_COLORS="mh=44;37:or=40;31;01"
## less
### general settings
export LESS="--RAW-CONTROL-CHARS --LONG-PROMPT --shift 5 --ignore-case"
### enable syntax highlighting
export LESSOPEN="| lesspipe.sh %s"
### do not save search entries at "~/.lesshst"
export LESSHISTFILE="/dev/null"
## do not include certain commands in history
export ZSH_AUTOSUGGEST_BUFFER_MAX_SIZE="20"
## do not include critical commands in history
export HISTORY_IGNORE="(*--clear*|*--force*|*cd*|*chmod*|*chown*|*clear*|*dd*|*delete*|*exit*|*find*|*for*|*halt*|*mkfs*|*lpr*|*ls*|*mv*|*perl-rename*|*poweroff*|*pwd*|*reboot*|*rename*|*remove*|*rm*|*shred*|*shutdown*|*sudo*|*suspend*|*touch*|*while*)"
## use "ccache" via "distcc". see also "/etc/conf.d/distccd", "/etc/distcc/hosts", "/etc/env.d/03distcc_ccache" and "/etc/portage/make.conf"
export PATH="/usr/lib/ccache/bin:${PATH}"
export CCACHE_DIR="/home/ramon/.var/tmp/ccache"
export DISTCC_DIR="/home/ramon/.var/tmp/distcc"
## mimic bash's cursor movement for paths
export WORDCHARS="${WORDCHARS/(-|\/)}"
## always use the best compression method of "xz"
export XZ_OPT="-9"

# output when opening shell
## list who is logged in
who
## list tmux sessions
if [[ $(pgrep "tmux") ]]
then
    tmux ls
fi
## portage
### last synchronisation in days
getLastPortageSync
