#############################################################################
# Copyright 2020-2022 Ramon Fischer                                         #
#                                                                           #
# Licensed under the Apache License, Version 2.0 (the "License");           #
# you may not use this file except in compliance with the License.          #
# You may obtain a copy of the License at                                   #
#                                                                           #
#     http://www.apache.org/licenses/LICENSE-2.0                            #
#                                                                           #
# Unless required by applicable law or agreed to in writing, software       #
# distributed under the License is distributed on an "AS IS" BASIS,         #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  #
# See the License for the specific language governing permissions and       #
# limitations under the License.                                            #
#############################################################################

# unbind default keys and shortcuts
## special keys
unbind-key = # choose buffer
unbind-key & # kill window
unbind-key % # horizontal window split
unbind-key '"' # vertical window split
unbind-key \$ # rename current session
unbind-key , # rename current window
unbind-key -T "copy-mode-vi" space # vi mode: copy selection and cancel
## lowercase letters
unbind-key -T "copy-mode-vi" v # vi mode: rectangle toggle
unbind-key -T "copy-mode-vi" y # vi mode: copy selection and cancel
unbind-key c # create new window
unbind-key o # select the next pane
unbind-key [ # enter copy mode
unbind-key n # select the next window
unbind-key ] # paste contents of buffer_0
unbind-key p # select the previous window
unbind-key x # kill the active pane
## uppercase letters
unbind-key C # customize options
unbind-key L # switch to the last client
## ctrl shortcuts
unbind-key C-b # prefix
unbind-key C-D # Choose a client from a list
unbind-key C-z # suspend client
unbind-key C-s # horizontal window split
unbind-key C-v # vertical window split
## alt shortcuts
unbind-key M-n # next window
unbind-key M-p # previous window
unbind-key M-o # rotate window
unbind-key M-1 # select layout even horizontal
unbind-key M-2 # select layout even vertical
unbind-key M-3 # select layout main horizontal
unbind-key M-4 # select layout main vertical
unbind-key M-5 # select layout tiled

# define global environment variables
set-environment -g "TMUX_USERNAME" "${USER}"
set-environment -g "TMUX_HOME_DIRECTORY" "${HOME}"
## see exports in "/etc/zsh/zshrc.local"
set-environment -g "TMUX_EUID" "${EUID}"

# define prefix
set-option -g prefix "C-a"
bind-key C-a "send-prefix"

# kill session
bind-key K confirm-before -p "Kill session '#{session_name}'? (y/n):" "kill-session"

# default shell
set-option -g default-shell "/bin/zsh"

# default command
#set-option -g default-command ""

# default terminal colour
set-option -g default-terminal "tmux-256color"

# set scroll history limit
set-option -g history-limit "240000"

# clear tmux scroll history
bind-key C-k clear-history

# choose buffer from window pane
bind-key C-b choose-buffer

# respawn the current pane
bind-key M-r confirm-before -p "Respawn pane '#{pane_index}'? (y/n):" "respawn-pane -k"

# toggle attached client read-only. must not be combined with other commands!
# in read-only mode, only "switch-client" and "detach-client" are interpreted!
bind-key -n M-r switch-client -r

# toggle window pane read-only.
bind-key X command-prompt -p "Lock window pane:" "select-pane -dt '%%'"
bind-key C-x command-prompt -p "Unlock window pane:" "select-pane -et '%%'"

# kill the current pane
bind-key x confirm-before -p "Kill pane '#{pane_index}'? (y/n):" "kill-pane"

# set display time for status line messages
set-option -g display-time "750"

# reload user tmux configuration file
bind-key r source-file "${TMUX_HOME_DIRECTORY}/.tmux.conf" \; \
    set-option display-time "1000" \; \
    display-message "Reloaded: \"${TMUX_HOME_DIRECTORY}/.tmux.conf\"" \; \
    set-option -u display-time

# reload global tmux configuration file
bind-key R source-file "/etc/tmux.conf" \; \
    set-option display-time "1000" \; \
    display-message "Reloaded: \"/etc/tmux.conf\"" \; \
    set-option -u display-time

# lock tmux session with "cmatrix" as screensaver after 30 minutes.
#set-option -g lock-command "cmatrix -sabu 9"
#set-option -g lock-after-time "1800"

# lock tmux session with "tty-clock" as screensaver after 30 minutes.
#set-option -g lock-command "tty-clock -rxSC 5 -d 2"
#set-option -g lock-after-time "1800"

# message bar colour
set-option -g message-style "bg=#1c1c1c,fg=yellow,underscore"

# enable status bar
set-option -g status "on"

# toggle status bar
bind-key -n M-s set-option -g status

# set status bar refresh interval
set-option -g status-interval "2"

# centre window list
set-option -g status-justify "centre"

# bash: to figure out tmux colour palette
#for i in {0..255}; do
#    printf "\x1b[38;5;${i}mcolour${i}\x1b[0m\n"
#done

# status line appearance
set-option -g status-style "bg=default"
set-option -g status-style "fg=white"

# status left
set-option -g status-left-length "100"
%hidden tmux_current_memory_usage_load="$(gawk '\
    /^MemTotal:/ { mem_total=$2 }; \
    /^MemFree:/ { mem_free=$2 }; \
    /^MemAvailable:/ { mem_available=$2 }; \
    /^Buffers:/ { mem_buffers=$2 }; \
    /^Cached:/ { mem_cached=$2 }; \
    /^SwapCached:/ { swap_cached=$2 }; \
    /^SwapTotal:/ { swap_total=$2 }; \
    /^SwapFree:/ { swap_free=$2 }; \
    /^Dirty:/ { mem_dirty=$2 }; \
    /^Writeback:/ { mem_writeback=$2 }; \
    /^SReclaimable:/ \
    {
        mem_sreclaimable=$2;

        mem_total_mb=mem_total/1024;
        mem_free_mb=mem_free/1024;
        mem_available_mb=mem_available/1024;
        mem_buffers_mb=mem_buffers/1024;
        mem_cached_mb=mem_cached/1024;
        mem_sreclaimable_mb=mem_sreclaimable/1024;
        mem_used_mb=mem_total_mb-mem_free_mb-mem_buffers_mb-mem_cached_mb-mem_sreclaimable_mb;

        # avoid division by zero
        if(mem_total_mb == 0)
        {
            mem_used_percentage=0;
            mem_available_percentage=0;
        }
        else
        {
            mem_used_percentage=mem_used_mb/mem_total_mb*100;
            mem_available_percentage=mem_available_mb/mem_total_mb*100;
        }

        swap_cached_mb=swap_cached/1024;
        swap_total_mb=swap_total/1024;
        swap_free_mb=swap_free/1024;
        swap_used_mb=swap_total_mb-swap_free_mb-swap_cached_mb;

        # avoid division by zero
        if(swap_total_mb == 0)
            swap_used_percentage=0;
        else
            swap_used_percentage=swap_used_mb/swap_total_mb*100;

        mem_writeback_mb=mem_writeback/1024;
        mem_dirty_mb=mem_dirty/1024;

        printf(\"[#[fg=cyan]%.0f/%.0f/%.2f%%#[fg=white]]\", mem_used_mb, mem_total_mb, mem_used_percentage);
        printf(\"[#[fg=#ffd7d7]%.0f/%.2f%%#[fg=white]]\", mem_available_mb, mem_available_percentage);
        printf(\"[#[fg=red]%.0f/%.0f/%.2f%%#[fg=white]]\", swap_used_mb, swap_total_mb, swap_used_percentage);
        printf(\"[#[fg=magenta]%.0f/%.0f#[fg=white]]\", mem_writeback_mb, mem_dirty_mb);
    }

    END{
        print \"[#[fg=green]\" $1\" \"$2\" \"$3;
    }' '/proc/meminfo' '/proc/loadavg')"
## "media-fonts/fs-fonts" is required to display the kanji character for "courage"
set-option -g status-left "\u2192#(echo ${tmux_current_memory_usage_load})#[fg=white]] \u52c7 "

# status middle: set window status appearance
set-option -g renumber-windows "on"
set-window-option -g monitor-activity "on"
set-window-option -g bell-action "other"
#set-window-option -g window-status-style "fg=white,dim"
set-window-option -g window-status-activity-style "fg=yellow,nodim,blink"
set-window-option -g window-status-bell-style "fg=red,nodim,blink"
#set-window-option -g window-status-last-style "fg=magenta,dim"
set-window-option -g window-status-format "#[fg=white,dim]#{window_index}:#{?client_readonly,read-only mode,#{pane_current_command}}[#{window_flags}]"
set-window-option -g window-status-current-format "#[fg=white,nodim]#{window_index}:#{?client_readonly,#[fg=white]read-only mode,#[fg=green]#{pane_current_command}}#[fg=white][#{window_flags}]"
set-window-option -g window-status-separator "#[fg=brightyellow,nodim]Â¦"

# status right
set-option -g status-right-length "100"
# must be returned as floating point number, "%d" returns false values.
%hidden tmux_current_uptime="$(gawk '\
    {
        uptime=$1;
        uptime_days=uptime/60/60/24;
        # use modulo to not output "24" and "60"
        uptime_hours=uptime/60/60%24;
        uptime_minutes=uptime/60%60;
        uptime_seconds=uptime%60;

        printf(\"[#[fg=yellow]%02i%02i%02i%02i#[fg=white]]\", int(uptime_days), int(uptime_hours), int(uptime_minutes), int(uptime_seconds));
    }' '/proc/uptime')"
%hidden tmux_current_ip_address="$(ip --oneline -family inet route get 1 | gawk \'
    {
        ipv4_address=$7;

        if(ipv4_address ~ /^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/)
            print \"[#[fg=#af87ff]\"ipv4_address\"#[fg=white]]\";
        else
            print \"[#[fg=#888888]n/a#[fg=white]]\";
    }')"
%if "#{||:#{||:#{==:#{client_uid},0},#{==:${TMUX_EUID},0}},#{==:${TMUX_USERNAME},root}}"
    set-option -g status-right " \u52c7 [#[fg=red]#{client_user}#[fg=white]@#[fg=#ffaf00]#{host}#[fg=white]][#[fg=#87afff]%Y%m%dT%H%M%S%z#[fg=white]]#(echo ${tmux_current_uptime})#(echo ${tmux_current_ip_address})[#[fg=#888888]#{session_name}#[fg=white]]\u2190"
%else
    set-option -g status-right " \u52c7 [#[fg=blue]#{client_user}#[fg=white]@#[fg=#ffaf00]#{host}#[fg=white]][#[fg=#87afff]%Y%m%dT%H%M%S%z#[fg=white]]#(echo ${tmux_current_uptime})#(echo ${tmux_current_ip_address})[#[fg=#888888]#{session_name}#[fg=white]]\u2190"
%endif

# position pane status
set-option -g pane-border-status "top"

# pane status
set-option -g pane-border-lines "double"
set-option -g pane-border-indicators "both"
%if "#{||:#{||:#{==:#{client_uid},0},#{==:${TMUX_EUID},0}},#{==:${TMUX_USERNAME},root}}"
    set-option -g pane-active-border-style "#{?client_readonly,fg=white,#{?pane_synchronized,fg=green,fg=red}}"
    set-option -g pane-border-style "#{?client_readonly,fg=white#,dim,#{?pane_synchronized,fg=green#,dim,fg=red#,dim}}"
%else
    set-option -g pane-active-border-style "#{?client_readonly,fg=white,#{?pane_synchronized,fg=green,fg=blue}}"
    set-option -g pane-border-style "#{?client_readonly,fg=white#,dim,#{?pane_synchronized,fg=green#,dim,fg=blue#,dim}}"
%endif
set-option -g pane-border-format "\u2192#{?pane_input_off,!, }#{pane_index}:#{?client_readonly,read-only mode,#{pane_current_command}}[#{history_size}/#{history_limit}][#{s,[/a-z],,:#{client_tty}}/#{s,[/a-z],,:#{pane_tty}}][#{pane_pid}][#{client_pid}][#{pid}]['#{=/#{e|-:#{pane_width},52}/...:pane_current_path}'] "

# set first window to index 1 (not 0) to map more to the keyboard layout
set-option -g base-index "1"
set-option -g pane-base-index "1"

# disable renaming windows by other programs
set-option -g allow-rename "off"
set-window-option -g automatic-rename "off"

# arrange windows
bind-key -n M-1 select-layout "even-horizontal"
bind-key -n M-2 select-layout "even-vertical"
bind-key -n M-3 select-layout "tiled"
bind-key -n M-o select-layout "main-horizontal"
bind-key -n M-e select-layout "main-vertical"

# split window horizontally (PREFIX + o)
bind-key o split-window -c "#{pane_current_path}"

# split window vertically (PREFIX + e)
bind-key e split-window -h -c "#{pane_current_path}"

# swap window pane
bind-key S command-prompt -p "Swap window pane:" "swap-pane -t '%%'"

# synchronize panes (PREFIX + s)
bind-key s set-window-option "synchronize-panes"

# create new window (PREFIX + c)
bind-key c new-window -c "#{pane_current_path}"

# convenient window navigation
bind-key -n M-n select-window -t ":+"
bind-key -n M-p select-window -t ":-"

# jump between words like in bash
set-window-option -g xterm-keys "on"

# set time to display panes
set-option -g display-panes-time "3000"

# enable faster key repetition
set-option -sg escape-time "0"

# select pane by number
bind-key q "display-panes"

# break pane to new window (PREFIX + !)
bind-key ! "break-pane"

# join/send the last active pane to the currently active window (PREFIX + ", PREFIX + ^)
bind-key '"' command-prompt -p "Join pane from window:" "join-pane -s ':%%'"
bind-key ^ command-prompt -p "Send pane to window:" "join-pane -t ':%%'"

# join/send an active pane to the currently active window (PREFIX + $, PREFIX + ,)
bind-key \$ command-prompt -p "Move pane from:" "move-pane -hs '%%'"
bind-key , command-prompt -p "Move pane to:" "move-pane -ht '%%'"

# kill window (PREFIX + k)
bind-key k confirm-before -p "Kill window '#{window_name}'? (y/n):" "kill-window"

# toggle mouse mode (PREFIX + m)
bind-key m set-option -g mouse \; \
    display-message "Mouse mode: #{?mouse,on,off}"

# enable vim navigation in copy-mode
set-window-option -g mode-keys "vi"

# vim style copy/paste (PREFIX + y, v, y, PREFIX + p)
bind-key y "copy-mode-vi"
bind-key -T" copy-mode-vi" "v" \; \
    send-keys -X "begin-selection"
bind-key -T "copy-mode-vi" "y" \; \
    send-keys -X "copy-selection-and-cancel"
bind-key p paste-buffer -p

# enter current iso date and time
## with the command "date" and "printf" as external dependencies
#bind-key P run-shell "printf '%s ' '#(date +%Y%m%d-%H%M%S)' | tmux load-buffer -" \; \
#    paste-buffer -dp
## only using internal macros and tools only
bind-key P set-option -g @tmux_current_iso_date_time "%Y%m%dT%H%M%S%z" \; \
    run-shell -C "set-buffer '#{T:@tmux_current_iso_date_time}'" \; \
    paste-buffer -d

# save current working directory path to the buffer
bind-key D run-shell -C "set-buffer \"'#{pane_current_path}'\""

# search within the buffer
bind-key -n C-space "copy-mode" \; \
    send-keys "?"

# options for neovim
set-option -sg escape-time "10"

# plugins
## tmux navigator
### workaround to preserve tmux variable for neovim when using "sudo -i" or "sudo -s"
### /etc/sudoers: Defaults env_keep += "TMUX"
### see also "/etc/xdg/nvim/nvimrc.local"
### smart pane switching with awareness of vim splits
#### pseudo substring match by substituting "g?(view|n?vim?x?)(diff)?$" from the current commmand string
bind-key -n C-k if-shell -b "[ '#{pane_current_command}' != '#{s/g?(view|n?vim?x?)(diff)?$//:#{pane_current_command}}' ]" "send-keys C-k" "select-pane -U"
bind-key -n C-j if-shell -b "[ '#{pane_current_command}' != '#{s/g?(view|n?vim?x?)(diff)?$//:#{pane_current_command}}' ]" "send-keys C-j" "select-pane -D"
bind-key -n C-h if-shell -b "[ '#{pane_current_command}' != '#{s/g?(view|n?vim?x?)(diff)?$//:#{pane_current_command}}' ]" "send-keys C-h" "select-pane -L"
bind-key -n C-l if-shell -b "[ '#{pane_current_command}' != '#{s/g?(view|n?vim?x?)(diff)?$//:#{pane_current_command}}' ]" "send-keys C-l" "select-pane -R"
#### bring back clear screen (PREFIX + CTRL + l)
bind-key C-l send-keys "C-l"
bind-key -T "copy-mode-vi" C-h select-pane -L
bind-key -T "copy-mode-vi" C-j select-pane -D
bind-key -T "copy-mode-vi" C-k select-pane -U
bind-key -T "copy-mode-vi" C-l select-pane -R
#bind-key -T "copy-mode-vi" C-\\ select-pane -l

## tmux resurrect
run-shell "/usr/local/share/git/keks24/tmux/tmux-resurrect/resurrect.tmux"
### resurrect save directory
#set-option -g @resurrect-dir "~/.tmux/resurrect"
### for vim
set-option -g @resurrect-strategy-vim "session"
### for neovim
set-option -g @resurrect-strategy-nvim "session"
### restore pane contents
#set-option -g @resurrect-capture-pane-contents "on"
